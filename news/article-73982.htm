<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vpnpaihang.github.io/news/article-73982.htm" />
    <title>Pandas大数据量内存优化</title>
        <meta name="description" content="一、背景介绍 Pandas在处理大数据(尤其是列比较多的场景)时，如果不做优化，内存占用还是很大的，下面通过一个实例来说明可以怎样优化  首先，生成一批18万的数据，每条数据151列  import " />
        <link rel="icon" href="/assets/website/img/clash_nyanpasu/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="免费VPN排行推荐 订阅机场节点中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpnpaihang.github.io/news/article-73982.htm" />
    <meta property="og:site_name" content="免费VPN排行推荐 订阅机场节点中文网" />
    <meta property="og:title" content="Pandas大数据量内存优化" />
    <meta property="og:image" content="https://vpnpaihang.github.io/uploads/20240728/cf47c2cc29ff801abb58b6fe1043933e.webp" />
        <meta property="og:release_date" content="2025-03-15T07:18:19" />
    <meta property="og:updated_time" content="2025-03-15T07:18:19" />
        <meta property="og:description" content="一、背景介绍 Pandas在处理大数据(尤其是列比较多的场景)时，如果不做优化，内存占用还是很大的，下面通过一个实例来说明可以怎样优化  首先，生成一批18万的数据，每条数据151列  import " />
        
    <meta charset="utf-8">
    <meta name="format-detection" content="telephone=no">
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0,  user-scalable=0">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Pandas大数据量内存优化">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Favicon Icon -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clash_nyanpasu/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clash_nyanpasu/venobox.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clash_nyanpasu/plugin_theme_css.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clash_nyanpasu/style.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clash_nyanpasu/responsive.css">
    <!-- modernizr js -->
    <script src="/assets/website/js/frontend/clash_nyanpasu/modernizr-2.8.3.min.js"></script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-PTMF6Q2F14"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-PTMF6Q2F14');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <div class="em40_header_area_main">
        <div class="tx_top2_relative">
            <div class="all_header_abs">
                <div class="techsold-main-menu one_page menu4 heading_style_4 witr_h_h6">
                    <div class="techsold_nav_area transprent-menu scroll_fixed bdbar">
                        <div class="container">
                            <div class="row logo-left">
                                <div class="col-xl-3 col-lg-3 col-md-2 col-sm-12">
                                    <div class="logo">
                                                                                <a href="/">
                                            免费VPN排行推荐                                        </a>
                                                                            </div>
                                </div>
                                <div class="col-xl-9 col-lg-9 col-md-10 col-sm-12">
                                    <nav class="techsold_menu">
                                        <ul class="sub-menu">
                                                                                        <li><a href="/">首页</a></li>
                                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                                        <li><a href="/client.htm">客户端</a></li>
                                                                                    </ul>
                                    </nav>
                                    <!-- MAIN MENU -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- mobile menu -->
    <div class="mobile_logo_area">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="mobilemenu_con">
                        <div class="mobile_menu_logo text-center">
                                                        <a href="/">
                                Clash Nyanpasu
                            </a>
                                                    </div>
                        <div class="mobile_menu_option">
                            <div class="mobile_menu_o mobile_opicon">
                                <i class="icofont-navigation-menu openclass"></i>
                            </div>
                            <div class="mobile_menu_inner mobile_p">
                                <div class="mobile_menu_content">
                                    <div class="mobile_menu_logo text-center">
                                                                                <a href="/">
                                            Clash Nyanpasu
                                        </a>
                                                                            </div>
                                    <div class="menu_area mobile-menu">
                                        <nav class="techsold_menu">
                                            <ul class="sub-menu">
                                                                                                <li><a href="/">首页</a></li>
                                                                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                                                <li><a href="/news/">新闻资讯</a></li>
                                                                                                <li><a href="/client.htm">客户端</a></li>
                                                                                            </ul>
                                        </nav>
                                    </div>
                                    <div class="mobile_menu_o mobile_cicon">
                                        <i class="icofont-close closeclass"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="mobile_overlay"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- End Mobile Menu -->
    <!-- breadcumb area -->
    <div class="breadcumb-area">
        <div class="container">
            <div class="row">
                <div class="col-md-12 txtc  text-center ccase">
                    <div class="brpt brptsize">
                        <h1 class="brcrumb_title">Pandas大数据量内存优化</h1>
                    </div>
                    <div class="breadcumb-inner">
                        <ul>
                            <li><a href="/">首页</a></li>
                            <li><a href="/news/">新闻资讯</a></li>
                            <li>-<span class="current">正文</span></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- End breadcumb area -->
    <!-- about area -->
    <div class="ts_about_area">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <h2>一、背景介绍</h2> <p>Pandas在处理大数据(尤其是<strong>列比较多</strong>的场景)时，如果不做优化，内存占用还是很大的，下面通过一个实例来说明可以怎样优化</p> <blockquote> <p>首先，生成一批18万的数据，每条数据151列</p> </blockquote> <pre><code class="language-python">import pandas as pd import numpy as np   def gen_big_data(csv_file: str, big_data_count=90000):     chars = 'abcdefghijklmnopqrstuvwxyz'     dates = pd.date_range(start='2020-01-01', periods=big_data_count, freq='30s')     big_data_cols = ['Name']     for group in range(1, 31):         big_data_cols.extend([f'date str {group}',                               f'bool {group}',                               f'int {group}',                               f'float {group}',                               f'str {group}'])     big_data = []     for i in range(0, big_data_count):         row = [f'Name Item {(i + 1)}']         for _ in range(0, 30):             row.extend([str(dates[i]),                         i % 2 == 0,                         np.random.randint(10000, 100000),                         10000 * np.random.random(),                         chars[np.random.randint(0, 26)] * 15])         big_data.append(row)     df = pd.DataFrame(data=big_data, columns=big_data_cols)     df.to_csv(csv_file, index=None)   if __name__ == '__main__':     # 修改存放路径以及模拟数据量(默认9万)     gen_big_data('./files/custom_big_data.csv', 180000)</code></pre> <p>查看生成的数据格式，可以看到每一行有151列</p> <p style="text-align:center;"><img decoding="async" alt="143e6764f47d47c9a67d2353fea292bd.png" src="http://img.555519.xyz/uploads/20221230/4bfdd81e239be8be9ad57420d6ff2158.jpg"></p> <blockquote> <p>保存数据后，先查看一下内存占用情况</p> </blockquote> <pre><code class="language-python">import pandas as pd   def info_memory(csv_file: str):     df = pd.read_csv(csv_file)     print(df.info(memory_usage='deep'))   if __name__ == '__main__':     info_memory('./files/custom_big_data.csv')</code></pre> <p>打印结果如下，可以看到当前内存占用为<strong>862.1MB</strong></p> <pre><code class="language-bash">&lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 180000 entries, 0 to 179999 Columns: 151 entries, Name to str 30 dtypes: bool(30), float64(30), int64(30), object(61) memory usage: 862.1 MB</code></pre> <blockquote> <p>查看不同类型的内存占用情况&nbsp;</p> </blockquote> <pre><code class="language-bash">def info_memory_by_d_type(csv_file: str):     df = pd.read_csv(csv_file)     for d_type in ['bool', 'float64', 'int64', 'object']:         d_type_selected = df.select_dtypes(include=[d_type])         mem_mean_bit = d_type_selected.memory_usage(deep=True).mean()         mem_mean_mb = mem_mean_bit / 1024 ** 2         print(f'mean memory usage: {d_type:&lt;7} - {mem_mean_mb:.3f} M')</code></pre> <p>输出结果如下，其中object类型占用内存最多</p> <pre><code class="language-bash">mean memory usage: bool    - 0.166 M mean memory usage: float64 - 1.329 M mean memory usage: int64   - 1.329 M mean memory usage: object  - 12.494 M</code></pre> <h2>二、优化方案</h2> <blockquote> <p>查看某个类型的内存占用量</p> </blockquote> <pre><code class="language-python">def info_mem_usage_mb(pd_obj):     if isinstance(pd_obj, pd.DataFrame):         mem_usage = pd_obj.memory_usage(deep=True).sum()     else:         mem_usage = pd_obj.memory_usage(deep=True)     # 转换为MB返回     return f'{mem_usage / 1024 ** 2:02.3f} MB'</code></pre> <blockquote> <p>int和float类型</p> </blockquote> <p>对于int和float类型的数据，Pandas加载到内存中的数据，默认是int64和float64。一般场景下的数据，用int32和float32就足够了，用<strong>numpy.iinfo</strong>和<strong>numpy.finfo</strong>可以打印对应类型的取值范围</p> <pre><code class="language-bash">Machine parameters for int32 --------------------------------------------------------------- min = -2147483648 max = 2147483647 ---------------------------------------------------------------  Machine parameters for int64 --------------------------------------------------------------- min = -9223372036854775808 max = 9223372036854775807 ---------------------------------------------------------------</code></pre> <pre><code class="language-bash">Machine parameters for float32 --------------------------------------------------------------- ... maxexp =    128   max =        3.4028235e+38 nexp =        8   min =        -max ---------------------------------------------------------------  Machine parameters for float64 --------------------------------------------------------------- ... maxexp =   1024   max =        1.7976931348623157e+308 nexp =       11   min =        -max ---------------------------------------------------------------</code></pre> <p>分别优化int和float的类型</p> <pre><code class="language-python">def optimize_int_and_float():     df_int = df.select_dtypes(include=['int64'])     df_int_converted = df_int.apply(pd.to_numeric, downcast='unsigned')     df_float = df.select_dtypes(include=['float64'])     df_float_converted = df_float.apply(pd.to_numeric, downcast='float')      print('int before     ', info_mem_usage_mb(df_int))     print('int converted  ', info_mem_usage_mb(df_int_converted))      print('float before   ', info_mem_usage_mb(df_float))     print('float converted', info_mem_usage_mb(df_float_converted))</code></pre> <p>优化后的结果如下，内存减少50%左右</p> <pre><code class="language-bash">int before      41.199 MB int converted   20.599 MB float before    41.199 MB float converted 20.599 MB</code></pre> <blockquote> <p>object类型中的普通str数据</p> </blockquote> <p>获取object类型数据，并调用describe()展示统计信息</p> <p style="text-align:center;"><img decoding="async" alt="5d183c5325314e73be43a2976fd1d21d.png" src="http://img.555519.xyz/uploads/20221230/701f3def7461521ce01d54cb503287e9.jpg"></p> <p>&nbsp;对于区分度较低的 str 1到str 30，一共只有26个可能的值，可以考虑转换为Pandas中的<strong>categroy</strong>类型，这里将区分度小于40%的列转换为category类型</p> <pre><code class="language-python">def optimize_obj():     df_obj = df.select_dtypes(include=['object'])     df_obj_converted = pd.DataFrame()     for col in df_obj.columns:         unique_count = len(df_obj[col].unique())         total_count = len(df_obj[col])         # 将区分度小于40%的列转换为category类型         if unique_count / total_count &lt;= 0.4:             df_obj_converted.loc[:, col] = df_obj[col].astype('category')         else:             df_obj_converted.loc[:, col] = df_obj[col]      print('object before   ', info_mem_usage_mb(df_obj))     print('object converted', info_mem_usage_mb(self.df_obj_converted))</code></pre> <p>执行结果如下，降低了300+M的内存</p> <pre><code class="language-python">object before    774.602 MB object converted 409.047 MB</code></pre> <blockquote> <p>object类型中的date数据</p> </blockquote> <pre><code class="language-python">def optimize_date_str():     df_date = pd.DataFrame()     df_date_converted = pd.DataFrame()     for col_name in df.columns:         if col_name.startswith('date str'):             df_date.loc[:, col_name] = df[col_name]             df_date_converted.loc[:, col_name] = pd.to_datetime(df[col_name])      print('date before   ', info_mem_usage_mb(df_date))     print('date converted', info_mem_usage_mb(df_date_converted))</code></pre> <p>执行结果如下，也降低了300+M的内存</p> <pre><code class="language-bash">date before    391.388 MB date converted 41.199 MB</code></pre> <h2>三、总体优化</h2> <p>综合以上的优化方法，并封装为类PandasMemoryOptimizeDemo</p> <pre><code class="language-bash">import pandas as pd import numpy as np   class PandasMemoryOptimizeDemo:     df: pd.DataFrame     df_int_converted: pd.DataFrame     df_float_converted: pd.DataFrame     df_obj_converted: pd.DataFrame     df_date_converted: pd.DataFrame      def __init__(self, csv_file: str):         self.csv_file = csv_file         self.df = pd.read_csv(self.csv_file)           @staticmethod     def info_mem_usage_mb(pd_obj):         if isinstance(pd_obj, pd.DataFrame):             mem_usage = pd_obj.memory_usage(deep=True).sum()         else:             mem_usage = pd_obj.memory_usage(deep=True)         # 转换为MB返回         return f'{mem_usage / 1024 ** 2:02.3f} MB'           def optimize_int_and_float(self):         df_int = self.df.select_dtypes(include=['int64'])         self.df_int_converted = df_int.apply(pd.to_numeric, downcast='unsigned')         df_float = self.df.select_dtypes(include=['float64'])         self.df_float_converted = df_float.apply(pd.to_numeric, downcast='float')          print('int before     ', self.info_mem_usage_mb(df_int))         print('int converted  ', self.info_mem_usage_mb(self.df_int_converted))          print('float before   ', self.info_mem_usage_mb(df_float))         print('float converted', self.info_mem_usage_mb(self.df_float_converted))      def optimize_obj(self):         df_obj = self.df.select_dtypes(include=['object'])         self.df_obj_converted = pd.DataFrame()         for col in df_obj.columns:             unique_count = len(df_obj[col].unique())             total_count = len(df_obj[col])             # 将区分度小于40%的列转换为category类型             if unique_count / total_count &lt;= 0.4:                 self.df_obj_converted.loc[:, col] = df_obj[col].astype('category')             else:                 self.df_obj_converted.loc[:, col] = df_obj[col]          print('object before   ', self.info_mem_usage_mb(df_obj))         print('object converted', self.info_mem_usage_mb(self.df_obj_converted))      def optimize_date_str(self):         df_date = pd.DataFrame()         self.df_date_converted = pd.DataFrame()         for col_name in self.df.columns:             if col_name.startswith('date str'):                 df_date.loc[:, col_name] = self.df[col_name]                 self.df_date_converted.loc[:, col_name] = pd.to_datetime(self.df[col_name])          print('date before   ', self.info_mem_usage_mb(df_date))         print('date converted', self.info_mem_usage_mb(self.df_date_converted))      def optimize_all(self):         self.optimize_int_and_float()         self.optimize_obj()         self.optimize_date_str()          df_converted = self.df.copy()         df_converted[self.df_int_converted.columns] = self.df_int_converted         df_converted[self.df_float_converted.columns] = self.df_float_converted         df_converted[self.df_obj_converted.columns] = self.df_obj_converted         df_converted[self.df_date_converted.columns] = self.df_date_converted          print('before   ', self.info_mem_usage_mb(self.df))         print('converted', self.info_mem_usage_mb(df_converted))   if __name__ == '__main__':     optimize_demo = PandasMemoryOptimizeDemo('./files/custom_big_data.csv')     optimize_demo.optimize_all()</code></pre> <p>执行结果如下，优化效果还是很明显的</p> <pre><code class="language-bash">before    862.149 MB converted 105.207 MB</code></pre> <h2>四、直接优化read_csv方法</h2> <p>写代码的过程中，如果每次都按照这样的步骤，其实还是很繁琐，那能不能在调用read_csv方法时就进行优化呢？</p> <p>接下来就一起来探索一下</p> <p>在PyCharm中，点击<a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://pandas.pydata.org/pandas-docs/version/1.4/reference/api/pandas.read_csv.html#"  title="read_csv" rel="nofollow">read_csv</a>进入源码，发现该方法提供了非常丰富的参数(50+)，这里只列举需要的参数</p> <pre><code class="language-python">def read_csv(     filepath_or_buffer: FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str],     # General Parsing Configuration     dtype: DtypeArg | None = None,     converters=None,     # Datetime Handling     parse_dates=None,     infer_datetime_format=False,     keep_date_col=False,     date_parser=None,     low_memory=_c_parser_defaults["low_memory"],     memory_map=False,     storage_options: StorageOptions = None, ):     # locals() should never be modified     kwds = locals().copy()</code></pre> <p>可以直接指定dtype和parse_dates，最终代码如下</p> <pre><code class="language-python">def big_data_optimized_read_csv(self):     d_type_dict = {}     date_indexes = []     for i in range(1, 31):         d_type_dict[f'int {i}'] = 'int32'         d_type_dict[f'float {i}'] = 'float32'         d_type_dict[f'str {i}'] = 'category'          date_indexes.append(5 * (i - 1) + 1)     self.df = pd.read_csv(self.csv_file, dtype=d_type_dict, parse_dates=date_indexes)     print('optimized read_csv: ', self.info_mem_usage_mb(self.df))</code></pre> <p>执行结果如下，内存占用也大大降低了</p> <pre><code class="language-bash">optimized read_csv:  105.207 MB</code></pre> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-73323.htm">建议穷人养的10种猫100元以下（穷人养猫攻略）</a></p>
                                        <p>下一个：<a href="/news/article-73983.htm">动物防疫预防措施包括（动物防疫的重点措施有哪些）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-69384.htm" title="南京哪里有宠物市场最大最出名的宠物市场（南京最大的宠物市场在哪）">南京哪里有宠物市场最大最出名的宠物市场（南京最大的宠物市场在哪）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-3-free-node-subscribe-links.htm" title="免费VPN排行推荐 | 3月3日21.9M/S|免费Shadowrocket/Clash/SSR/V2ray免费节点订阅分享">免费VPN排行推荐 | 3月3日21.9M/S|免费Shadowrocket/Clash/SSR/V2ray免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-71343.htm" title="克隆Gitee代码报错Unable to connect to gitee.com: gitee.com[0: 180.97.125.228]: errno=Unknown error">克隆Gitee代码报错Unable to connect to gitee.com: gitee.com[0: 180.97.125.228]: errno=Unknown error</a></li>
                        <li class="py-2"><a href="/news/article-70675.htm" title="宠物粮十大品牌（宠物粮十大品牌排名）">宠物粮十大品牌（宠物粮十大品牌排名）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-2-free-node-subscribe.htm" title="免费VPN排行推荐 | 3月2日20M/S|免费Clash/Shadowrocket/SSR/V2ray免费节点订阅分享">免费VPN排行推荐 | 3月2日20M/S|免费Clash/Shadowrocket/SSR/V2ray免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-66203.htm" title="猫瘟疫苗多大可以打（猫瘟疫苗管多久）">猫瘟疫苗多大可以打（猫瘟疫苗管多久）</a></li>
                        <li class="py-2"><a href="/news/article-73983.htm" title="动物防疫预防措施包括（动物防疫的重点措施有哪些）">动物防疫预防措施包括（动物防疫的重点措施有哪些）</a></li>
                        <li class="py-2"><a href="/news/article-74673.htm" title="Hyperledger Fabric 通道配置文件和容器环境变量详解">Hyperledger Fabric 通道配置文件和容器环境变量详解</a></li>
                        <li class="py-2"><a href="/news/article-67453.htm" title="Kafka群起时报错：kafka-run-class.sh: line 258: exec: java: not found的解决办法">Kafka群起时报错：kafka-run-class.sh: line 258: exec: java: not found的解决办法</a></li>
                        <li class="py-2"><a href="/news/article-68092.htm" title="动物医院管理办法规定由谁制定（动物医院规章制度范本）">动物医院管理办法规定由谁制定（动物医院规章制度范本）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">51</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">3</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
    <!-- footer area -->
<div class="witrfm_area">
    <div class="footer-bottom">
        <div class="container">
            <div class="row">
                <div class="col-md-12 footer_style_1">
                    <div class="copy-right-text text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p>
                            免费VPN排行推荐 订阅机场节点中文网 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Include All JS -->
<script src="/assets/website/js/frontend/clash_nyanpasu/jquery-3.5.1.min.js"></script>
<script src="/assets/website/js/frontend/clash_nyanpasu/bootstrap.min.js"></script>
<script src="/assets/website/js/frontend/clash_nyanpasu/isotope.pkgd.min.js"></script>
<script src="/assets/website/js/frontend/clash_nyanpasu/slick.min.js"></script>
<script src="/assets/website/js/frontend/clash_nyanpasu/imagesloaded.pkgd.min.js"></script>
<script src="/assets/website/js/frontend/clash_nyanpasu/venobox.min.js"></script>
<script src="/assets/website/js/frontend/clash_nyanpasu/jquery.appear.js"></script>
<script src="/assets/website/js/frontend/clash_nyanpasu/jquery.knob.js"></script>
<script src="/assets/website/js/frontend/clash_nyanpasu/theme-pluginjs.js"></script>
<script src="/assets/website/js/frontend/clash_nyanpasu/jquery.meanmenu.js"></script>
<script src="/assets/website/js/frontend/clash_nyanpasu/ajax-mail.js"></script>
<script src="/assets/website/js/frontend/clash_nyanpasu/theme.js"></script>
<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>